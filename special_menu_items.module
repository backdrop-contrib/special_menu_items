<?php
/**
 * @file
 * Module to enable placeholder or separator menu items. 
 *
 * A placeholder is a menu item that is not actually a link. For example, a 
 * drop down menu might have a parent item that is used only to group children
 * beneath it. 
 *
 * A separator is a menu item which has a title like "-------" and is also not
 * a link but merely a means to structure other menu items.
 */

/**
 * Implements hook_config_info().
 */
function special_menu_items_config_info() {
  $prefixes['special_menu_items.settings'] = array(
    'label' => t('Special Menu Items settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function special_menu_items_menu() {
  $items['<nolink>'] = array(
    'page callback' => 'special_menu_items_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['<separator>'] = array(
    'page callback' => 'special_menu_items_page_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/special_menu_items'] = array(
    'title' => 'Special Menu Items',
    'description' => 'Configure Special Menu Items.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('special_menu_items_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback for special menu links.
 *
 * Simply returns MENU_NOT_FOUND. We can't use backdrop_not_found() as page
 * callback since this would lead to calling backdrop_deliver_page() twice.
 *
 * @return int
 *   The MENU_NOT_FOUND status code.
 */
function special_menu_items_page_callback() {
  return MENU_NOT_FOUND;
}

/**
 * A replacement for theme_menu_link().
 *
 * This function will render a link if it is "nolink" or "separator". Otherwise
 * it will call the original menu item link function.
 * 
 * @see special_menu_items_theme_registry_alter().
 */
function special_menu_items_link($variables) {
  $element = $variables['element'];
  if (in_array($element['#href'], array('<nolink>', '<separator>'))) {
    $attributes = array('class' => array());
    $config = config('special_menu_items.settings');

    switch ($element['#href']) {
      case '<nolink>':
        $tag = $config->get('nolink_tag');
        $title = $element['#title'];
        $attributes['class'][] = 'nolink';
        $attributes['tabindex'][] = '0';
        break;

      case '<separator>':
        $tag = $config->get('separator_tag');
        $title = $config->get('separator_value');
        $attributes['class'][] = 'separator';
        break;
    }

    $output = special_menu_items_render_menu_item($tag, $title, $attributes);
    $sub_menu = '';
    if ($element['#below']) {
      $sub_menu = backdrop_render($element['#below']);
    }

    return '<li' . backdrop_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
  }

  // Call the original theme function for normal menu link.
  $theme_registry = theme_get_registry();
  $function = $theme_registry['special_menu_items_link_default']['function'];
  return $function($variables);
}

/**
 * Returns menu item rendered.
 */
function special_menu_items_render_menu_item($tag, $value, $attributes = array()) {
  // $attributes may be a string already or an array
  if (is_array($attributes)) {
    $attributes = backdrop_attributes($attributes);
  }
  $length = strlen($tag);
  if ($tag[0] == '<' && $tag[$length - 1] == '>') {
    $tag = substr($tag, 1, $length - 2);
  }
  $closingtag = explode(' ', $tag, 2);
  $closingtag = '</' . $closingtag[0] . '>';
  $tag = '<' . $tag . $attributes . '>';

  return $tag . $value . $closingtag;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * We replace theme_menu_item_link with our own function.
 */
function special_menu_items_theme_registry_alter(&$registry) {
  // Save previous value from registry in case another theme overwrites 
  // menu_item_link.
  $registry['special_menu_items_link_default'] = $registry['menu_link'];
  $registry['menu_link']['function'] = 'special_menu_items_link';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Description changed, added nolink and separator as path types.
 */
function special_menu_items_form_menu_edit_item_alter(&$form, &$form_state) {
  // Some menu items have a pre-defined path which cannot be modified hence no
  // default_value.
  $options = array(
    'path' => t('Path'),
    'nolink' => t('Text with no link'), 
    'separator' => t('Separator'),
  );
  switch ($form['link_path']['#default_value']) {
    case '<nolink>':
      $type = 'nolink';
      break;
    case '<separator>':
      $type = 'separator';
      break;
    default:
      $type = 'path';
      break;
  }
  $form['menu_item_type'] = array(
    '#type' => 'radios',
    '#title' => t('Menu item type'),
    '#options' => $options,
    '#default_value' => $type,
    '#weight' => -25,
  );
  $form['link_title']['#title'] = t('Menu item title');
  $form['link_title']['#required'] = FALSE;
  $form['link_title']['#states'] = array(
    'visible' => array(
      ':input[name=menu_item_type]' => array(
        array('value' => 'path'),
        array('value' => 'nolink'),
      ),
    ),
    'required' => array(
      ':input[name=menu_item_type]' => array(
        array('value' => 'path'),
        array('value' => 'nolink'),
      ),
    ),
  );
  $form['link_path']['#required'] = FALSE;
  $form['link_path']['#states'] = array(
    'invisible' => array(
      ':input[name=menu_item_type]' => array(
        array('value' => 'separator'),
        array('value' => 'nolink'),
      ),
    ),
    'required' => array(
      ':input[name=menu_item_type]' => array(
        array('value' => 'path'),
      ),
    ),
  );
  if (isset($form['link_path']['#default_value'])) {
    $default_value = $form['link_path']['#default_value'];

    if (preg_match('/^<nolink>\/[0-9]+$/', $default_value)) {
      $default_value = '<nolink>';
    }
    elseif (preg_match('/^<separator>\/[0-9]+$/', $default_value)) {
      $default_value = '<separator>';
    }

    $form['link_path']['#default_value'] = $default_value;
  }
  array_unshift($form['#validate'], 'special_menu_items_form_menu_edit_item_validate');
}

/**
 *
 * Adjust entries here.
 */
function special_menu_items_form_menu_edit_item_validate(&$form, &$form_state) {
  switch ($form_state['values']['menu_item_type']) {
    case 'nolink':
      form_set_value($form['link_path'], '<nolink>', $form_state);
      break;
    case 'separator':
      form_set_value($form['link_path'], '<separator>', $form_state);
      form_set_value($form['link_title'], '----------', $form_state);
      break;
    default:
      break;
  }
  if (empty($form_state['values']['link_path'])) {
    form_set_error('link_path', t('Path is required.'));
  }
  if (empty($form_state['values']['link_title'])) {
    form_set_error('link_path', t('Title is required.'));
  }
}

/**
 * Special Menu Items admin settings form.
 *
 * @return array
 *   The settings form used by Special Menu Items.
 */
function special_menu_items_admin_settings_form() {
  $config = config('special_menu_items.settings');
  $form['#config'] = 'special_menu_items.settings';
  $form['nolink_tag'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML tag for "nolink"'),
    '#description' => ($config->get('nolink_tag') != '<a href="#">') ? t('Default: <em>&lt;a href="#"&gt;</em>') : '',
    '#default_value' => $config->get('nolink_tag'),
  );

  $form['separator_tag'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML tag for "separator"'),
    '#description' => ($config->get('separator_tag') != '<span>') ? t('Default: <em>&lt;span&gt;</em>') : '',
    '#default_value' => $config->get('separator_tag'),
  );

  $form['separator_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value to be displayed for the "separator"'),
    '#description' => ($config->get('separator_value') != '<hr>') ? t('Default: <em>&lt;hr&gt;</em>') : '',
    '#default_value' => $config->get('separator_value'),
  );

  return system_settings_form($form);
}

/**
  * Implements hook_form_alter().
  *
  * Ensure that <nolink> and <separator> menu items are rendered correctly
  * on admin form overview pages.
  *
  */
function special_menu_items_form_menu_overview_form_alter(&$form, &$form_state, $menu) {
  foreach (element_children($form) as $key) {
    if (substr($key, 0, 5) == 'mlid:') {
      switch($form[$key]['#item']['link_path']) {
        case '<nolink>':
          $form[$key]['title']['#markup'] = $form[$key]['#item']['link_title'];
          break;
        case '<separator>':
          $form[$key]['title']['#markup'] = '<p><hr /></p>';
          break;
      }
    }
  }
}

/**
 * Implements hook_breadcrumb_alter().
 * This is used to fix the issue of breadcrumbs pointing at <nolink> or <separator>.
 * 
 * This function finds crumbs with href pointing at <nolink> or <separator> and replaces them 
 * with the href of the next crumb.
 */
function special_menu_items_menu_breadcrumb_alter(&$active_trail) {
  $previous_href = backdrop_get_path_alias();

  // Loop backwards through the breadcrumbs
  $backward_crumbs = array_reverse($active_trail);
  foreach ($backward_crumbs as $index => $crumb) {
    if ($crumb['href'] == '<nolink>' || $crumb['href'] == '<separator>' ) {
      $backward_crumbs[$index]['href'] = $previous_href;
    } else {
      $previous_href = $crumb['href'];
    }
  }
  $active_trail = array_reverse($backward_crumbs);
}

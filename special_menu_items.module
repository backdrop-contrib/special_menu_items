<?php
/**
 * @file
 * Module to enable placeholder or separator menu items. 
 *
 * A placeholder is a menu item that is not actually a link. For example, a 
 * drop down menu might have a parent item that is used only to group children
 * beneath it. 
 *
 * A separator is a menu item which has a title like "-------" and is also not
 * a link but merely a means to structure other menu items.
 */

/**
 * Implements hook_config_info().
 */
function special_menu_items_config_info() {
  $prefixes['special_menu_items.settings'] = array(
    'label' => t('Special Menu Items settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implementation of hook_menu()
 */
function special_menu_items_menu() {
  $items['<nolink>'] = array(
    'page callback' => 'backdrop_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['<separator>'] = array(
    'page callback' => 'backdrop_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/special_menu_items'] = array(
    'title' => 'Special Menu Items',
    'description' => 'Configure Special Menu Items.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('special_menu_items_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

 return $items;
}



/**
 * A replacement for theme_link().
 *
 * This function will render a link if it is "nolink" or "separator". Otherwise
 * it will call the original menu item link function.
 */
function special_menu_items_link($variables) {
  if (in_array($variables['element']['#href'], array('<nolink>', '<separator>'))) {
    $config = config('special_menu_items.settings');

    switch ($variables['element']['#href']) {
      case '<nolink>':
        $tag = $config->get('nolink_tag');
        $title = $variables['element']['#title'];
        $variables['element']['#attributes']['class'][] = 'nolink';
        break;

      case '<separator>':
        $tag = $config->get('separator_tag');
        $title = $config->get('separator_value');
        $variables['element']['#attributes']['class'][] = 'separator';
        break;
    }

    $attributes = backdrop_attributes($variables['element']['#attributes']);

    if ($tag != '<a>') {
      // <a> tags can have these but a <span> cannot, so we remove them.
      foreach (array('accesskey', 'target', 'rel', 'name') as $attribute) {
        $attributes = preg_replace("/ $attribute=\".*\"/i", "", $attributes);
      }
    }

    return special_menu_items_render_menu_item($tag, $title, $attributes);
  }

  // Call the original theme function for normal menu link.
  return theme('special_menu_items_link_default', $variables);
}


/**
 * Returns menu item rendered.
 */
function special_menu_items_render_menu_item($tag, $value, $attributes = array()) {
  // $attributes may be a string already or an array
  if (is_array($attributes)) {
    $attributes = backdrop_attributes($attributes);
  }
  $length = strlen($tag);
  if ($tag[0] == '<' && $tag[$length - 1] == '>') {
    $tag = substr($tag, 1, $length-2);
  }
  $closingtag = explode(' ', $tag,2);
  $closingtag = '</' . $closingtag[0] . '>';
  $tag = '<' . $tag . $attributes . '>';

  return $tag . $value . $closingtag;
}

/**
 * Implementation of hook_theme_registry_alter().
 *
 * We replace theme_menu_item_link with our own function.
 */
function special_menu_items_theme_registry_alter(&$registry) {
  // Save previous value from registry in case another theme overwrites menu_item_link
  $registry['special_menu_items_link_default'] = $registry['link'];
  $registry['link']['function'] = 'special_menu_items_link';
}

/**
 * Implementation of hook_form_FROM_ID_alter().
 *
 * Description changed, added nolink and separator as path types.
 */
function special_menu_items_form_menu_edit_item_alter(&$form, &$form_state) {
 // Some menu items have a pre-defined path which cannot be modified hence no default_value
 if (isset($form['link_path']['#default_value'])) {
   $default_value = $form['link_path']['#default_value'];

   if (preg_match('/^<nolink>\/[0-9]+$/', $default_value)) {
     $default_value = '<nolink>';
   }
   elseif (preg_match('/^<separator>\/[0-9]+$/', $default_value)) {
     $default_value = '<separator>';
   }

   $form['link_path']['#default_value'] = $default_value;
   $form['link_path']['#description'] .=  ' ' . t('Enter "%nolink" to generate non-linkable item, enter "%separator" to generate separator item.', array('%nolink' => '<nolink>', '%separator' => '<separator>'));
  }
}

/**
 * Implementation of hook_init().
 */
function special_menu_items_init() {
  // Make breadcrumb of nolink menu item nonlinkable.
  $breadcrumb = backdrop_get_breadcrumb();

  foreach($breadcrumb as $key => $crumb){
    if (strlen(strstr($crumb,'<nolink>')) > 0) {
      $crumb = strip_tags($crumb);
      $tag = config_get('special_menu_items.settings', 'nolink_tag');
      $breadcrumb[$key] = special_menu_items_render_menu_item($tag, $crumb);
    }
  }

  backdrop_set_breadcrumb($breadcrumb);
}

/**
 * Form builder: Special Menu Items admin settings form.
 */
function special_menu_items_admin_settings_form() {
  $config = config('special_menu_items.settings');
  $form['nolink_tag'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML tag for "nolink"'),
    '#description' => t('By default, Special Menu Items will use a span tag for the nolink menu item. Here you can specify your own tag.'),
    '#default_value' => $config->get('nolink_tag'),
  );

  $form['separator_tag'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML tag for "separator"'),
    '#description' => t('By default, Special Menu Items will use a span tag for the separator menu item. Here you can specify your own tag.'),
    '#default_value' => $config->get('separator_tag'),
  );

  $form['separator_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value to be displayed for the "separator"'),
    '#description' => t('By default, Special Menu Items will use a "&lt;hr&gt;" value for the separator. You can specify your own value for the separator.'),
    '#default_value' => $config->get('separator_value'),
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Submit handler for special_menu_items_admin_settings_form().
 */
function special_menu_items_admin_settings_form_submit($form, &$form_state) {
  $config = config('special_menu_items.settings');
  $config->set('nolink_tag', $form_state['values']['nolink_tag']);
  $config->set('separator_tag', $form_state['values']['separator_tag']);
  $config->set('separator_value', $form_state['values']['separator_value']);
  $config->save();
  backdrop_set_message(t('Settings saved'), 'status');
}
